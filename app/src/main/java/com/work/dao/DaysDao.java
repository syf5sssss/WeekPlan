package com.work.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.work.entity.Days;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "days".
*/
public class DaysDao extends AbstractDao<Days, Long> {

    public static final String TABLENAME = "days";

    /**
     * Properties of entity Days.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "ID");
        public final static Property PlanId = new Property(1, int.class, "PlanId", false, "PLAN_ID");
        public final static Property Data = new Property(2, String.class, "Data", false, "DATA");
        public final static Property CreateTime = new Property(3, java.util.Date.class, "CreateTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(4, java.util.Date.class, "UpdateTime", false, "UPDATE_TIME");
        public final static Property Status = new Property(5, String.class, "Status", false, "STATUS");
    }


    public DaysDao(DaoConfig config) {
        super(config);
    }
    
    public DaysDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"days\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: ID
                "\"PLAN_ID\" INTEGER NOT NULL ," + // 1: PlanId
                "\"DATA\" TEXT," + // 2: Data
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 3: CreateTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 4: UpdateTime
                "\"STATUS\" TEXT NOT NULL );"); // 5: Status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"days\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Days entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPlanId());
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(3, Data);
        }
        stmt.bindLong(4, entity.getCreateTime().getTime());
        stmt.bindLong(5, entity.getUpdateTime().getTime());
        stmt.bindString(6, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Days entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
        stmt.bindLong(2, entity.getPlanId());
 
        String Data = entity.getData();
        if (Data != null) {
            stmt.bindString(3, Data);
        }
        stmt.bindLong(4, entity.getCreateTime().getTime());
        stmt.bindLong(5, entity.getUpdateTime().getTime());
        stmt.bindString(6, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Days readEntity(Cursor cursor, int offset) {
        Days entity = new Days( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.getInt(offset + 1), // PlanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // Data
            new java.util.Date(cursor.getLong(offset + 3)), // CreateTime
            new java.util.Date(cursor.getLong(offset + 4)), // UpdateTime
            cursor.getString(offset + 5) // Status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Days entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlanId(cursor.getInt(offset + 1));
        entity.setData(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreateTime(new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUpdateTime(new java.util.Date(cursor.getLong(offset + 4)));
        entity.setStatus(cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Days entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Days entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Days entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
